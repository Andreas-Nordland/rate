library(lava)
library(survival)
library(mets)
library(rate)
sim_surv <- function(n.grp, beta, zeta, kappa){
n <- 2 * n.grp
# id
id <- 1:n
# covariate W
W <- runif(n, min = 1, max = 3)
# treatment
A <- c(rep(0, n.grp), rep(1, n.grp))
# observed exposure
pd <- lava::expit(kappa[1] + kappa[2] * W)
D1 <- rbinom(n,1,pd)
D0 <- rep(0, n)
D <- D1 * A + D0 * (1-A)
# simulate T
TT1 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D1, W * D1), ncol = 3) %*% beta)))
TT0 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D0, W * D0), ncol = 3) %*% beta)))
TT <- TT1 * A + TT0 * (1-A)
# simulate C
C <- c(unlist(rexp(n, 1) / exp(matrix(c(W, A, D, W * A), ncol = 4) %*% zeta)))
time <- apply(cbind(TT, C), 1, min)
event <- TT < C
d <- data.frame(
id = id,
W = W,
A = A,
D1 = D1,
D0 = D0,
D = D,
TT1 = TT1,
TT0 = TT0,
TT = TT,
C = C,
time = time,
event = event
)
d <- d[order(time), ]
return(d)
}
par0 <- list(
beta = c(0.6, -0.5, -0.3),
zeta = c(0.2, -0.4, -0.8, 0.6),
kappa = c(2, -0.5),
tau = 0.5
)
set.seed(1)
onerun_ranger(1e3)
library(future.apply)
library(lava)
library(survival)
library(mets)
library(rate)
sim_surv <- function(n.grp, beta, zeta, kappa){
n <- 2 * n.grp
# id
id <- 1:n
# covariate W
W <- runif(n, min = 1, max = 3)
# treatment
A <- c(rep(0, n.grp), rep(1, n.grp))
# observed exposure
pd <- lava::expit(kappa[1] + kappa[2] * W)
D1 <- rbinom(n,1,pd)
D0 <- rep(0, n)
D <- D1 * A + D0 * (1-A)
# simulate T
TT1 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D1, W * D1), ncol = 3) %*% beta)))
TT0 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D0, W * D0), ncol = 3) %*% beta)))
TT <- TT1 * A + TT0 * (1-A)
# simulate C
C <- c(unlist(rexp(n, 1) / exp(matrix(c(W, A, D, W * A), ncol = 4) %*% zeta)))
time <- apply(cbind(TT, C), 1, min)
event <- TT < C
d <- data.frame(
id = id,
W = W,
A = A,
D1 = D1,
D0 = D0,
D = D,
TT1 = TT1,
TT0 = TT0,
TT = TT,
C = C,
time = time,
event = event
)
d <- d[order(time), ]
return(d)
}
par0 <- list(
beta = c(0.6, -0.5, -0.3),
zeta = c(0.2, -0.4, -0.8, 0.6),
kappa = c(2, -0.5),
tau = 0.5
)
set.seed(1)
onerun_cox <- function(n.grp){
dt <- sim_surv(
n = n.grp,
beta = par0$beta,
zeta = par0$zeta,
kappa = par0$kappa
)
require("mets")
require("SuperLearner")
est <- rate:::RATE.surv(
treatment = A ~ 1,
post.treatment = D ~ A * W,
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.glm")),
response = Surv(time, event) ~ W*D,
call.response = "phreg",
censoring = Surv(time, event == 0) ~ W*A + D,
call.censoring = "phreg",
tau = par0$tau,
data = dt,
M = 2
)
out <- c(
est$coef,
setNames(diag(est$vcov)^(0.5), paste(names(est$coef), ".se", sep = ""))
)
return(out)
}
set.seed(1)
onerun_cox(1e3)
devtools::document()
devtools::install()
library(future.apply)
library(lava)
library(survival)
library(mets)
library(rate)
sim_surv <- function(n.grp, beta, zeta, kappa){
n <- 2 * n.grp
# id
id <- 1:n
# covariate W
W <- runif(n, min = 1, max = 3)
# treatment
A <- c(rep(0, n.grp), rep(1, n.grp))
# observed exposure
pd <- lava::expit(kappa[1] + kappa[2] * W)
D1 <- rbinom(n,1,pd)
D0 <- rep(0, n)
D <- D1 * A + D0 * (1-A)
# simulate T
TT1 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D1, W * D1), ncol = 3) %*% beta)))
TT0 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D0, W * D0), ncol = 3) %*% beta)))
TT <- TT1 * A + TT0 * (1-A)
# simulate C
C <- c(unlist(rexp(n, 1) / exp(matrix(c(W, A, D, W * A), ncol = 4) %*% zeta)))
time <- apply(cbind(TT, C), 1, min)
event <- TT < C
d <- data.frame(
id = id,
W = W,
A = A,
D1 = D1,
D0 = D0,
D = D,
TT1 = TT1,
TT0 = TT0,
TT = TT,
C = C,
time = time,
event = event
)
d <- d[order(time), ]
return(d)
}
par0 <- list(
beta = c(0.6, -0.5, -0.3),
zeta = c(0.2, -0.4, -0.8, 0.6),
kappa = c(2, -0.5),
tau = 0.5
)
set.seed(1)
d0 <- sim_surv(n.grp = 5e6, beta = par0$beta, zeta = par0$zeta, kappa = par0$kappa)
Psi0_A1 <- mean(((d0$TT1 <= par0$tau)))
Psi0_A0 <- mean((d0$TT0 <= par0$tau))
Psi0_D1 <- mean(d0$D[d0$A == 1])
Psi0 <- mean(((d0$TT1 <= par0$tau) - (d0$TT0 <= par0$tau))[d0$D1 == 1])
rm(d0)
onerun_cox <- function(n.grp){
dt <- sim_surv(
n = n.grp,
beta = par0$beta,
zeta = par0$zeta,
kappa = par0$kappa
)
require("mets")
require("SuperLearner")
est <- rate:::RATE.surv(
treatment = A ~ 1,
post.treatment = D ~ A * W,
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.glm")),
response = Surv(time, event) ~ W*D,
call.response = "phreg",
censoring = Surv(time, event == 0) ~ W*A + D,
call.censoring = "phreg",
tau = par0$tau,
data = dt,
M = 2
)
out <- c(
est$coef,
setNames(diag(est$vcov)^(0.5), paste(names(est$coef), ".se", sep = ""))
)
return(out)
}
set.seed(1)
onerun_cox(1e3)
sl
rate:::sl()
devtools::load_all()
devtools::document()
library(rate)
devtools::load_all()
onerun_cox <- function(n.grp){
dt <- sim_surv(
n = n.grp,
beta = par0$beta,
zeta = par0$zeta,
kappa = par0$kappa
)
require("mets")
require("SuperLearner")
est <- rate:::RATE.surv(
treatment = A ~ 1,
post.treatment = D ~ A * W,
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.glm")),
response = Surv(time, event) ~ W*D,
call.response = "phreg",
censoring = Surv(time, event == 0) ~ W*A + D,
call.censoring = "phreg",
tau = par0$tau,
data = dt,
M = 2
)
out <- c(
est$coef,
setNames(diag(est$vcov)^(0.5), paste(names(est$coef), ".se", sep = ""))
)
return(out)
}
set.seed(1)
onerun_cox(1e3)
devtools::load_all()
devtools::load_all()
library(future.apply)
library(lava)
library(survival)
library(mets)
library(rate)
sim_surv <- function(n.grp, beta, zeta, kappa){
n <- 2 * n.grp
# id
id <- 1:n
# covariate W
W <- runif(n, min = 1, max = 3)
# treatment
A <- c(rep(0, n.grp), rep(1, n.grp))
# observed exposure
pd <- lava::expit(kappa[1] + kappa[2] * W)
D1 <- rbinom(n,1,pd)
D0 <- rep(0, n)
D <- D1 * A + D0 * (1-A)
# simulate T
TT1 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D1, W * D1), ncol = 3) %*% beta)))
TT0 <- c(unlist(rexp(n, 1) / exp(matrix(c(W, D0, W * D0), ncol = 3) %*% beta)))
TT <- TT1 * A + TT0 * (1-A)
# simulate C
C <- c(unlist(rexp(n, 1) / exp(matrix(c(W, A, D, W * A), ncol = 4) %*% zeta)))
time <- apply(cbind(TT, C), 1, min)
event <- TT < C
d <- data.frame(
id = id,
W = W,
A = A,
D1 = D1,
D0 = D0,
D = D,
TT1 = TT1,
TT0 = TT0,
TT = TT,
C = C,
time = time,
event = event
)
d <- d[order(time), ]
return(d)
}
par0 <- list(
beta = c(0.6, -0.5, -0.3),
zeta = c(0.2, -0.4, -0.8, 0.6),
kappa = c(2, -0.5),
tau = 0.5
)
set.seed(1)
d0 <- sim_surv(n.grp = 5e6, beta = par0$beta, zeta = par0$zeta, kappa = par0$kappa)
Psi0_A1 <- mean(((d0$TT1 <= par0$tau)))
Psi0_A0 <- mean((d0$TT0 <= par0$tau))
Psi0_D1 <- mean(d0$D[d0$A == 1])
Psi0 <- mean(((d0$TT1 <= par0$tau) - (d0$TT0 <= par0$tau))[d0$D1 == 1])
rm(d0)
onerun_cox <- function(n.grp){
dt <- sim_surv(
n = n.grp,
beta = par0$beta,
zeta = par0$zeta,
kappa = par0$kappa
)
require("mets")
require("SuperLearner")
est <- rate:::RATE.surv(
treatment = A ~ 1,
post.treatment = D ~ A * W,
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.glm")),
response = Surv(time, event) ~ W*D,
call.response = "phreg",
censoring = Surv(time, event == 0) ~ W*A + D,
call.censoring = "phreg",
tau = par0$tau,
data = dt,
M = 2
)
out <- c(
est$coef,
setNames(diag(est$vcov)^(0.5), paste(names(est$coef), ".se", sep = ""))
)
return(out)
}
set.seed(1)
onerun_cox(1e3)
onerun_ranger <- function(n.grp){
dt <- sim_surv(
n = n.grp,
beta = par0$beta,
zeta = par0$zeta,
kappa = par0$kappa
)
require("ranger")
require("SuperLearner")
est <- RATE.surv(
treatment = A ~ 1,
post.treatment = D ~ A * W,
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.glm")),
response = Surv(time, event) ~ W + D,
args.response = list(num.threads = NULL),
call.response = "ranger",
censoring = Surv(time, event == 0) ~ W + A + D,
args.censoring = list(num.threads = NULL),
call.censoring = "ranger",
tau = par0$tau,
data = dt,
M = 2
)
out <- c(
est$coef,
setNames(diag(est$vcov)^(0.5), paste(names(est$coef), ".se", sep = ""))
)
return(out)
}
set.seed(1)
onerun_ranger(1e3)
library(lava)
library(future.apply)
library(progressr)
library(rate)
m <- lvm() |>
addvar("a") |>
distribution(~a, ones.lvm(p = 0.5)) |>
addvar(var = paste("w", 1:10, sep = "")) |>
regression("d1", value = function(w1, w2, w3) (w1>0) * 2*sin(2*w2) + exp(w3)) |>
distribution(~ d1, binomial.lvm()) |>
intervention("d",  value=function(a, d1) a * d1) |>
regression("y1", value = function(d1, w1,w4,w5) d1 * (2 * cos(2*w4) - 1) + w1*w5 + log(abs(w5*w4))) |>
distribution(~ y1, binomial.lvm()) |>
regression("y0", value = function(w1,w4,w5) w1*w5 + log(abs(w5*w4))) |>
distribution(~ y0, binomial.lvm()) |>
intervention("y",  value=function(y1, y0, a)  a * y1 + (1-a)*y0)
# True value --------------------------------------------------------------
tmp <- sim(m, n = 1e7)
Psi0 <- mean((tmp$y1 - tmp$y0)[tmp$d1 == 1])
rm(tmp)
Psi0
M <- 5
onerun <- function(n){
dat <- sim(m, n)
r <- RATE(response=y~1, post.treatment=d~1, treatment=a~1, data=dat, efficient = FALSE)
r_eff <- RATE(
response=y ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
post.treatment = d ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
treatment=a~1,
data=dat,
M=M,
SL.args.response = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam")),
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam"))
)
out <- c(
simple=coef(r), simple.se = vcov(r)^.5,
rate=coef(r_eff), rate.se=vcov(r_eff)^.5
)
return(out)
}
onerun(1e3)
devtools::load_all()
library(rate)
M <- 5
onerun <- function(n){
dat <- sim(m, n)
r <- RATE(response=y~1, post.treatment=d~1, treatment=a~1, data=dat, efficient = FALSE)
r_eff <- RATE(
response=y ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
post.treatment = d ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
treatment=a~1,
data=dat,
M=M,
SL.args.response = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam")),
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam"))
)
out <- c(
simple=coef(r), simple.se = vcov(r)^.5,
rate=coef(r_eff), rate.se=vcov(r_eff)^.5
)
return(out)
}
onerun(1e3)
n <- 1e3
dat <- sim(m, n)
r <- RATE(response=y~1, post.treatment=d~1, treatment=a~1, data=dat, efficient = FALSE)
r
r_eff <- RATE(
response=y ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
post.treatment = d ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
treatment=a~1,
data=dat,
M=M,
SL.args.response = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam")),
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam"))
)
coef(r)
coef(r)["rate"]
r["rate"]
vcov(r)
vcov(r)["rate","rate"]^.5
vcov(r)["rate","rate"]
coef(r_eff)
vcov(r_eff)["rate","rate"]
M <- 5
onerun <- function(n){
dat <- sim(m, n)
r <- RATE(response=y~1, post.treatment=d~1, treatment=a~1, data=dat, efficient = FALSE)
r_eff <- RATE(
response=y ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
post.treatment = d ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
treatment=a~1,
data=dat,
M=M,
SL.args.response = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam")),
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam"))
)
out <- c(
simple=coef(r)["rate"], simple.se = vcov(r)["rate","rate"]^.5,
rate=coef(r_eff)["rate"], rate.se=vcov(r_eff)["rate","rate"]^.5
)
return(out)
}
set.seed(1)
onerun(1e3)
M <- 5
onerun <- function(n){
dat <- sim(m, n)
r <- RATE(response=y~1, post.treatment=d~1, treatment=a~1, data=dat, efficient = FALSE)
r_eff <- RATE(
response=y ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
post.treatment = d ~ a + w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8 + w9  + w10,
treatment=a~1,
data=dat,
M=M,
SL.args.response = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam")),
SL.args.post.treatment = list(family = binomial(),
SL.library = c("SL.mean", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.gam"))
)
out <- c(
empir=coef(r)["rate"], empir.se = vcov(r)["rate","rate"]^.5,
eff=coef(r_eff)["rate"], eff.se=vcov(r_eff)["rate","rate"]^.5
)
return(out)
}
set.seed(1)
onerun(1e3)
devtools::build_readme()
usethis::use_readme_rmd()
